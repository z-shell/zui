# -*- mode: zsh; sh-indentation: 2; indent-tabs-mode: nil; sh-basic-offset: 2; -*-
# vim: ft=zsh sw=2 ts=2 et
#
# ZUI demo: text fields
#
# Started from Zle or from command line

-zui_std_cleanup deserialize:"zui-demo-text-fields"
-zui_std_init app:"zui-demo-text-fields" app_name:"ZUI Text Fields"

builtin emulate -LR zsh
builtin setopt extended_glob typeset_silent warn_create_global

-zui_std_init2 # after emulate -LR

-zui_std_store_default_app_config b:border 1
-zui_std_store_default_app_config s:status_size 3
-zui_std_store_default_app_config b:status_border 1

local xtra  # extra line of text, loaded from text field

# Generator for module 1
demo_generator_A() {
  local mod="$1" ice="$2"

  # Variables of the text field
  (( ${+ZUI[my_tfield1_width]} == 0 )) && ZUI[my_tfield1_width]=50
  (( ${+ZUI[my_tfield1_start]} == 0 )) && ZUI[my_tfield1_start]=1
  (( ${+ZUI[my_tfield1_data]} == 0 )) && ZUI[my_tfield1_data]="Enter accepts, ESC cancels, UP/DOWN resizes"

  reply=()
  noglob -zui_std_text_field "tfield1_$mod" ZUI[my_tfield1_width] ZUI[my_tfield1_start] ZUI[my_tfield1_data] "" "" "" 'xtra="Received text: ${ZUI[CYAN]}${ZUI[my_tfield1_data]}${ZUI[FMT_END]}"; -zui_std_fly_mod_regen "'"$mod"'" "'"$ice"'"'

  # Content
  reply=( "${ZUI[YELLOW]}ZUI${ZUI[FMT_END]} text-field example: ${reply[1]}" $xtra )

  # Non-selectable lines    Hops to jump with [ and ]   Local anchors
  reply2=( ${xtra:+2} )     reply3=( 1 )                reply4=( )
}

## Start application ##
zui-event-loop 1:demo_generator_A

-zui_std_cleanup serialize

return 0
